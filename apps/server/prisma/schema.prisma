generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

enum Role {
  SUPERADMIN
  ADMIN
  MANAGER
  TENANT
  SUPPORT
}

enum Highlight {
  HighSpeedInternetAccess
  WasherDryer
  AirConditioning
  Heating
  SmokeFree
  CableReady
  SatelliteTV
  DoubleVanities
  TubShower
  Intercom
  SprinklerSystem
  RecentlyRenovated
  CloseToTransit
  GreatView
  QuietNeighborhood
}

enum Amenity {
  WasherDryer
  AirConditioning
  Dishwasher
  HighSpeedInternet
  HardwoodFloors
  WalkInClosets
  Microwave
  Refrigerator
  Pool
  Gym
  Parking
  PetsAllowed
  WiFi
}

enum PropertyType {
  Rooms
  Tinyhouse
  Apartment
  Villa
  Townhouse
  Cottage
}

enum ApplicationStatus {
  Pending
  Denied
  Approved
}

enum PaymentStatus {
  Pending
  Paid
  PartiallyPaid
  Overdue
}

model User {
  id                       String                 @id @default(cuid())
  email                    String                 @unique
  user_name                String                 @unique
  email_verified           Boolean                @default(false)
  name                     String?
  phone_number             String?
  picture_url              String?
  password_hash            String?
  is_active                Boolean                @default(true)
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
  last_login_at            DateTime?

  roles                    UserRole[]
  refresh_tokens           RefreshToken[]
  webauthn_creds           WebAuthnCredential[]
  api_keys                 ApiKey[]
  login_activities         LoginActivity[]
  attempts                 LoginAttempt[]

  tenant                   Tenant?
  manager                  Manager?

  email_verification_tokens EmailVerificationToken[]
  password_reset_tokens     PasswordResetToken[]
}

model UserRole {
  user_id String
  role    Role
  org_id  String?

  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, role])
}

model RefreshToken {
  id         String   @id @default(cuid())
  user_id    String
  hashed     String
  jti        String   @unique
  device_id  String?
  ip         String?
  user_agent String?
  expires_at DateTime
  revoked_at DateTime?
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, expires_at])
}

model EmailVerificationToken {
  id         String   @id @default(cuid())
  user_id    String
  hashed     String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, expires_at])
}

model PasswordResetToken {
  id         String   @id @default(cuid())
  user_id    String
  hashed     String
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id, expires_at])
}

model WebAuthnCredential {
  id         String   @id
  user_id    String
  public_key String
  counter    Int      @default(0)
  transports String[]
  aaguid     String?
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model ApiKey {
  id          String   @id @default(cuid())
  user_id     String?
  name        String
  hashed_key  String
  scopes      String[]
  expires_at  DateTime?
  revoked_at  DateTime?
  created_at  DateTime @default(now())

  user        User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)
}

model LoginActivity {
  id         String   @id @default(cuid())
  user_id    String
  at         DateTime @default(now())
  ip         String?
  user_agent String?
  success    Boolean  @default(true)
  note       String?

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model LoginAttempt {
  id      String   @id @default(cuid())
  user_id String?
  email   String?
  at      DateTime @default(now())
  ip      String?
  success Boolean  @default(false)
  reason  String?

  user    User?    @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([email, at])
}

model Manager {
  id             Int      @id @default(autoincrement())
  user_id        String   @unique
  name           String
  email          String
  phone_number   String

  user               User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  managed_properties Property[]
}

model Tenant {
  id           Int      @id @default(autoincrement())
  user_id      String   @unique
  name         String
  email        String
  phone_number String

  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  properties   Property[]  @relation("tenant_properties")
  favorites    Property[]  @relation("tenant_favorites")
  applications Application[]
  leases       Lease[]
}

model Location {
  id          Int    @id @default(autoincrement())
  address     String
  city        String
  state       String
  country     String
  postal_code String
  coordinates Unsupported("geography(Point, 4326)")

  properties  Property[]
}

model Property {
  id                  Int          @id @default(autoincrement())
  name                String
  description         String
  price_per_month     Float
  security_deposit    Float
  application_fee     Float
  photo_urls          String[]
  amenities           Amenity[]
  highlights          Highlight[]
  is_pets_allowed     Boolean      @default(false)
  is_parking_included Boolean      @default(false)
  beds                Int
  baths               Float
  square_feet         Int
  property_type       PropertyType
  posted_date         DateTime     @default(now())
  average_rating      Float        @default(0)
  number_of_reviews   Int          @default(0)

  location_id         Int
  manager_id          Int

  location     Location     @relation(fields: [location_id], references: [id])
  manager      Manager      @relation(fields: [manager_id], references: [id])
  leases       Lease[]
  applications Application[]
  favorited_by Tenant[]     @relation("tenant_favorites")
  tenants      Tenant[]     @relation("tenant_properties")

  @@index([location_id, posted_date])
}

model Application {
  id               Int               @id @default(autoincrement())
  application_date DateTime
  status           ApplicationStatus
  property_id      Int
  tenant_id        Int
  name             String
  email            String
  phone_number     String
  message          String?
  lease_id         Int?              @unique

  property Property @relation(fields: [property_id], references: [id])
  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  lease    Lease?   @relation(fields: [lease_id], references: [id])

  @@index([tenant_id, property_id, status])
}

model Lease {
  id          Int      @id @default(autoincrement())
  start_date  DateTime
  end_date    DateTime
  rent        Float
  deposit     Float
  property_id Int
  tenant_id   Int

  property    Property     @relation(fields: [property_id], references: [id])
  tenant      Tenant       @relation(fields: [tenant_id], references: [id])
  application Application?
  payments    Payment[]

  @@index([tenant_id, property_id, start_date])
}

model Payment {
  id             Int           @id @default(autoincrement())
  amount_due     Float
  amount_paid    Float
  due_date       DateTime
  payment_date   DateTime
  payment_status PaymentStatus
  lease_id       Int

  lease          Lease @relation(fields: [lease_id], references: [id])

  @@index([lease_id, due_date])
}
